# ==============================
# Build System Configuration
# ==============================
[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

# ==============================
# Project Metadata
# ==============================
[project]
name = "pytest-envx"
dynamic = ["version"]
description = "Pytest plugin for managing environment variables with interpolation and .env file support."
authors = [
    { name = "Eugene Liukin", email = "eugeneliukin.dev@gmail.com" },
]
requires-python = ">=3.9"
readme = "README.md"
license = { text = "MIT" }
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Framework :: Pytest",
    "Environment :: Plugins",
    "Typing :: Typed",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Testing",
]
dependencies = [
    "pytest>=8.4.1",
    "python-dotenv>=1.1.0",
    "tomli>=2.2.1; python_version<'3.11'",
]

[dependency-groups]
dev = [
    { include-group = "test" },
    { include-group = "type" },
    { include-group = "lint" },
]
test = [
    "coverage>=7.9.1",
    "pytest>=8.3.4",
    "pytest-cov>=6.2.1",
    "pytest-xdist>=3.7.0",
    "diff-cover>=9.4.1",
    "covdefaults>=2.3.0"
]
type_hints = [
    "mypy>=1.16.1",
    "pytest-stub>=1.1.0"
]
lint = [
    "pre-commit>=4.2.0",
]
pkg-meta = [
    "check-wheel-contents>=0.6.1",
    "twine>=6.1",
    "uv>=0.5.29",
]

[project.urls]
Homepage = "https://github.com/eugeneliukindev/pytest-envx"
Repository = "https://github.com/eugeneliukindev/pytest-envx"
Issues = "https://github.com/eugeneliukindev/pytest-envx/issues"
Changelog = "https://github.com/eugeneliukindev/pytest-envx/releases"

# ==============================
# Pytest
# ==============================

[project.entry-points.pytest11]
pytest_envx = "pytest_envx.plugin"

[tool.pytest]
testpaths = ["tests"]


[tool.pytest.ini_options]
testpaths = [
    "tests",
]

# ==============================
# PDM
# ==============================
[tool.pdm]
version = { source = "file", path = "src/pytest_envx/__version__.py" }
distribution = true

# ==============================
# Mypy
# ==============================
[tool.mypy]
strict = true
ignore_missing_imports = true

# ==============================
# Ruff
# ==============================
[tool.ruff]
line-length = 120
lint.select = [
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "F", # pyflakes
    "I", # isort
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
lint.ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
    "W191", # indentation contains tabs
]

# ==============================
# Coverage
# ==============================
[tool.coverage.run]
parallel = true
branch = true
plugins = ["covdefaults"]

[tool.coverage.html]
skip_covered = false
show_contexts = true

[tool.coverage.path]
source = [
    "src",
    "*/src",
    "*\\src",
]

[tool.coverage.report]
fail_under = 100
omit = [
    "*/lib/python*/site-packages/pytest_envx/__init__.py",
    "*/lib/python*/site-packages/pytest_envx/__version__.py",
    "src/pytest_envx/__init__.py",
    "src/pytest_envx/__version__.py"
]
show_missing = true
